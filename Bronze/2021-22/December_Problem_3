//	The problem can be found at http://www.usaco.org/index.php?page=viewproblem2&cpid=1157

//	With this problem, I used casework. We have 3 cases: 1 turn, 2 turns and 3 turns. Solving each individual case is much easier,
//	and all that is required is a few for loops per case. Then, just add up all the cases to get the final result.

import java.util.*;
public class Dec2021_Bronze_P3 {
	public static int[] Walking_Home() {
		//		
		//		Variable Definitions
		Scanner obj=new Scanner(System.in);
		String line=obj.nextLine();
		int fields=Integer.parseInt(line);
		int[] output=new int[fields];
		//		Code
		for(int i=0;i<output.length;i++) {
			output[i]=No_of_ways(obj);
		}

		return output;
	}

	public static int No_of_ways(Scanner obj) {
		//		Variable Definitions
		int paths=0;
		String line=obj.nextLine();
		String[] input_data=line.split(" ");
		int field_size=Integer.parseInt(input_data[0]);
		int turns=Integer.parseInt(input_data[1]);
		char[][] field=new char[field_size][field_size];
		for(int i=0;i<field_size;i++) {
			line=obj.nextLine();
			char[] temp=line.toCharArray();
			field[i]=temp;
		}
		//		Code
		if(turns==1) {
			paths=One_Turn(field,0,0,field_size-1,field_size-1,0);
		}else if(turns==2) {
			paths=Two_Turn(field)+(One_Turn(field,0,0,field_size-1,field_size-1,0));
		}else if(turns==3) {
			paths=Three_Turn(field)+Two_Turn(field)+One_Turn(field,0,0,field_size-1,field_size-1,0);
		}

		return paths;
	}

	public static int One_Turn(char[][] field,int x1,int y1,int x2,int y2,int direction) {
		int paths=0;
		//		Case 1 (Horizontal First)

		int flag=0;
		if(direction!=-1) {
			for(int i=y1;i<=y2;i++) {
				if(field[x2][i]=='H') {
					flag=1;
				}
			}
			for(int i=x1;i<=x2;i++) {
				if(field[i][y1]=='H') {
					flag=1;
				}
			}
			if(flag==0) {
				paths++;
			}
		}
		//		Case 2 (Vertical First)
		flag=0;
		if(direction!=1) {
			for(int i=y1;i<y2;i++) {
				if(field[i][x2]=='H') {
					flag=1;
				}
			}
			for(int i=x1;i<=x2;i++) {	
				if(field[y1][i]=='H') {
					flag=1;
				}
			}
			
			if(flag==0) {
				paths++;
			}
		}
		return paths;
	}

	public static int Two_Turn(char[][] field) {
		int paths=0;
		//		C1

		for(int i=1;i<field.length-1;i++) {
			int flag=0;
			for(int j=0;j<=i;j++) {
				if(field[0][j]=='H') {
					flag=1;
				}
			}
			for(int j=i;j<field.length;j++) {
				if(field[field.length-1][j]=='H') {
					flag=1;
				}
			}
			for(int j=0;j<field.length;j++) {
				if(field[j][i]=='H') {
					flag=1;
				}
			}
			if(flag==0) {
				paths++;
			}
		}
		//		C2

		for(int i=1;i<field.length-1;i++) {
			int flag=0;
			for(int j=0;j<=i;j++) {
				if(field[j][0]=='H') {
					flag=1;
				}
			}
			for(int j=i;j<field.length;j++) {
				if(field[j][field.length-1]=='H') {
					flag=1;
				}
			}
			for(int j=0;j<field.length;j++) {
				if(field[i][j]=='H') {
					flag=1;
				}
			}
			if(flag==0) {
				paths++;
			}
		}
		return paths;
	}
	public static int Three_Turn(char[][] field) {
		int paths=0;
		for(int i=1;i<field.length-1;i++) {
			for(int j=1;j<field.length-1;j++) {
				int new_paths_1=One_Turn(field,0,0,i,j,-1)*One_Turn(field,i,j,field.length-1,field.length-1,-1);
				int new_paths_2=One_Turn(field,0,0,i,j,1)*One_Turn(field,i,j,field.length-1,field.length-1,1);
				paths=paths+new_paths_1+new_paths_2;
			}
		}


		return paths;
	}

	public static void main(String[] args) {
		int[] output=Walking_Home();
		for(int i=0;i<output.length;i++) {
			System.out.println(output[i]);
		}
	}

}
