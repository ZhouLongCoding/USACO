//	The problem can be found at http://www.usaco.org/index.php?page=viewproblem2&cpid=1088

//	First, note that either every row or every column will alternate between having a cow or not having a cow.
//	We can prove this by doing a little casework. If there does not exist 2 cows such that they are next to each other,
//	then the conditions are obviously met. Otherwise, the two cows next to each other fix the columns they are in. 
//	Then, for all the rest of the columns, we must alternate between having a cow and not having a cow because otherwise
//	there will be 2x2 squares that do not satisfy the conditions.

//	Now, we can start from either the rows or the columns. There are only 2 ways for each row/column (whichever one is alternating) 
//	so we just have to pick the larger one. Finally, we just pick the larger answer and then output it.

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;
import java.util.Arrays;

public class Jan2021_Silver_P3 {

	public static int Spaced_out() {
		int row=0;
		int column=0;
		Scanner obj=new Scanner(System.in);
		String line=obj.nextLine();
		int n=Integer.parseInt(line);
		int[][] beauty_array=new int[n][n];
		for(int i=0;i<n;i++) {
			line=obj.nextLine();
			String[] temp=line.split(" ");
			for(int j=0;j<temp.length;j++) {
				beauty_array[i][j]=Integer.parseInt(temp[j]);
			}
		}

		row=row(beauty_array);
		column=column(beauty_array);

		return Math.max(row, column);
	}

	public static int row(int[][] beauty_array) {
		int output=0;
		int n=beauty_array.length;
		for(int i=0;i<n;i++) {
			int cow=0;
			int blank=0;
			for(int j=0;j<n;j++) {
				if(j%2==0) {
					cow+=beauty_array[i][j];
				}else {
					blank+=beauty_array[i][j];
				}
			}
			output+=Math.max(cow, blank);
		}

		return output;
	}

	public static int column(int[][] beauty_array) {
		int output=0;
		int n=beauty_array.length;
		for(int i=0;i<n;i++) {
			int cow=0;
			int blank=0;
			for(int j=0;j<n;j++) {
				if(j%2==0) {
					cow+=beauty_array[j][i];
				}else {
					blank+=beauty_array[j][i];
				}
			}
			output+=Math.max(cow, blank);
		}

		return output;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] output=Dance_Mooves();
		for(int i=0;i<output.length;i++) {
			System.out.println(output[i]);
		}
	}
}


