//	The problem can be found at http://www.usaco.org/index.php?page=viewproblem2&cpid=1062

//	Note that we can replace an infected cow travelling to an infected farm with a superspreader event. 
//	So, we only ever need n-1 infected cows travelling because there are n farms and 1 is infected at the start.
//	So, we just have to calculate how many superspreader events there needs to be and then add n-1 to that. 
//	Now, root the tree at 1 and let i be the root of some subtree. At some point there will be a single infected
//	cow in i and none in its subtree. Now, if i has n children, we need to do superspreader events until there are at least n+1 infected cows.
//	So, we can use a for loop and calculate how many superspreader events there is required in each farm with at least 2 connections.

import java.util.*;
import java.io.*;
public class Dec2020_Silver_P1 {

	public static int Cowntagion() {
		int days=0;
		Scanner obj=new Scanner(System.in);
		String line=obj.nextLine();
		int farms=Integer.parseInt(line);
		int[] connections=new int[farms];
		for(int i=1;i<farms;i++) {
			line=obj.nextLine();
			String[] temp=line.split(" ");
			connections[Integer.parseInt(temp[0])-1]++;
			connections[Integer.parseInt(temp[1])-1]++;
		}
		connections[0]++;
		for(int i=0;i<connections.length;i++) {
			int infected=1;
			int duplications=0;
			while(infected<connections[i]) {
				infected=infected*2;
				duplications++;
			}
			days=days+duplications;
		}
		days=days+farms-1;
		return days;
	}

	public static void main(String[] args) {
		//		 TODO Auto-generated method stub
		System.out.println(Cowntagion());
		
	}

}
