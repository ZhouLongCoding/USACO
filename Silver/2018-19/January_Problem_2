
package usaco;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;

public class Silver2019Janurary {

	public static void Icy_Perimeter() {
		try {
			BufferedReader br=new BufferedReader(new FileReader("perimeter.in"));
			BufferedWriter bw=new BufferedWriter(new FileWriter("perimeter.out"));
			String line=br.readLine();
			int size=Integer.parseInt(line);
			boolean[][] ice_cream=new boolean[size+2][size+2];
			for(int i=1;i<=size;i++) {
				line=br.readLine();
				for(int j=1;j<=size;j++) {
					if(line.charAt(j-1)=='#') {
						ice_cream[i][j]=true;
					}
				}
			}

			int area=0;
			int perimeter=0;
			for(int i=1;i<=size;i++) {
				for(int j=1;j<=size;j++) {
					if(ice_cream[i][j]==true) {
						int[] search=BFS(i,j,ice_cream);
						if(search[0]>area) {
							area=search[0];
							perimeter=search[1];
						}else if(search[0]==area && search[1]<perimeter) {
							perimeter=search[1];
						}
					}
				}
			}

			bw.write(area+" "+perimeter);
			bw.write("\n");
			bw.close();
		}catch(Exception e) {
			e.printStackTrace();
		}


	}

	public static int[] BFS(int i, int j, boolean[][] ice_cream) {
		int[] output=new int[2];
		ArrayDeque<int[]> queue=new ArrayDeque<>();
		int[] initial={i,j};
		queue.add(initial);

		while(queue.isEmpty()==false) {
			int[] x=queue.pop();
			if(ice_cream[x[0]][x[1]]==true) {
				output[0]++;
				ice_cream[x[0]][x[1]]=false;
				ArrayList<int[]> adj=adjacent(x[0],x[1],ice_cream);
				output[1]+=4-2*adj.size();
				for(int[] k:adj) {
					int[] temp= {k[0],k[1]};
					queue.add(temp);
				}
			}
		}

		return output;
	}


	public static ArrayList<int[]> adjacent(int i, int j, boolean[][] ice_cream) {

		ArrayList<int[]> list=new ArrayList<>();
		if(ice_cream[i][j+1]==true) {
			int[] temp= {i,j+1};
			list.add(temp);
		}
		if(ice_cream[i+1][j]==true) {
			int[] temp= {i+1,j};
			list.add(temp);
		}
		if(ice_cream[i][j-1]==true) {
			int[] temp= {i,j-1};
			list.add(temp);
		}
		if(ice_cream[i-1][j]==true) {
			int[] temp= {i-1,j};
			list.add(temp);
		}
		return list;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Icy_Perimeter();
	}

}
