//	The problem can be found at http://www.usaco.org/index.php?page=viewproblem2&cpid=966

//	This problem requires little to no computing power if you use modular arithmatic. Notice that every 8 numbers
//	or 15 words, the cycle resets. So, the answer is just the floor of n/8 multiplied by 15 and then adding a constant depending
//	on the number mod 8. So, I was able to do this question in O(1)

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;

public class Dec2019_Silver_P1 {

	public static void MooBuzz() {
		try{
			BufferedReader br=new BufferedReader(new FileReader("moobuzz.in"));
			String line=br.readLine();
			int n=Integer.parseInt(line);
			int output=n/8;
			output=output*15;
			if(n%8==0) {
				output--;
			}else if(n%8==1) {
				output++;
			}else if(n%8==2) {
				output=output+2;
			}else if(n%8==3) {
				output=output+4;
			}else if(n%8==4) {
				output=output+7;
			}else if(n%8==5) {
				output=output+8;
			}else if(n%8==6) {
				output=output+11;
			}else if(n%8==7) {
				output=output+13;
			}else{

			}
			BufferedWriter bw=new BufferedWriter(new FileWriter("moobuzz.out"));
			bw.write(output+"\n");
			bw.close();
		}catch(Exception e) {
			e.printStackTrace();
		}

	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		MooBuzz();
	}

}
